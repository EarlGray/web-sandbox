<!DOCTYPE html>
<html lang='en'>
<head>
<title>WebSocket example</title>
<meta charset='UTF-8'/>
<link href='http://fonts.googleapis.com/css?family=Noto+Sans:400,700,400italic&subset=cyrillic,latin' rel='stylesheet' type='text/css'>
<script src="http://code.jquery.com/jquery.min.js"></script>
<script>

function WSProtocol(user, wsurl, action) {
    var ws = new WebSocket(wsurl);
    var send = function(data) { ws.send(JSON.stringify(data)); };

    ws.onopen = function () {
        console.log('ws.onopen()');
        send({'type': 'login', 'user': user});
    };
    ws.onclose = function (ev) {
        action.ws_closed(ev);
        ws.close();
    };
    ws.onerror = function (err) {
        action.ws_error(err);
    };
    ws.onmessage = function (ev) {
        var msg = JSON.parse(ev.data);
        switch (msg.type) {
          case 'login':
            if (msg.status == 'ok') action.login_ok(msg.users);
            else action.login_failed(msg.reason);
            break;
          case 'recv': action.msg_received(msg); break;
          case 'sent': action.msg_sent(msg.msgid); break;
          case 'join': action.user_joined(msg.user); break;
          case 'exit': action.user_quit(msg.user); break;
          default: action.unknown(ev.data);
        }
    };

    return { 'ws': ws, 'send': send };
}

function ChatNotifications() {
    if (!Notification) {
        console.log('Warning: Notifications not available');
        return;
    }

    if (Notification.permission !== 'granted') {
        Notification.requestPermission();
    }

    var focused = true;
    var enabled = true;

    return {
        'gotFocus': function () { focused = true; },
        'lostFocus': function () { focused = false; },
        'enabled': function (status) { enabled = status; },
        'status': function () { return Notification.permission; },
        'notify': function (who, text) {
            if (!enabled || focused) return;
            new Notification('New message from ' + who, { 'body': text });
        },
    };
}

// Global state
var wsconn;
var user;
var notifs;

function appendMessage(sender, text, time) {
    var fmttime = new Date(time).toTimeString().split(' ')[0];

    var row = $('<tr/>');
    row.append($('<td/>').attr('class', 'histtime').append(fmttime));
    row.append($('<td/>').attr('class', 'histuser').append(sender));
    row.append($('<td/>').attr('class', 'histmsg').append(text));
    $('#ulhist').append(row);

    var histdiv = $('#hist');
    histdiv.scrollTop(histdiv[0].scrollHeight);
}
function adjustHeight() {
    var histdiv = $('#hist');
    histdiv.height($(window).height() - $('#message').outerHeight() - 50);
    histdiv.scrollTop(histdiv[0].scrollHeight);
}


function userJoined(user) {
    var row = $('<tr/>');
    row.append($('<td/>').attr('class', 'rstrtd').text(user));
    $('#rstr').append(row);

    appendMessage('', $('<span/>').attr('class', 'msginfo').text('' + user + ' joined'), Date.now());
}
function userQuit(user) {
    console.log(user + ' quit');
    var tbody = $('#rstr tbody')[0];
    for (var elem in tbody.children) {
        var c = tbody.children[elem];
        if (c === undefined) continue;
        if (c.textContent == user) {
            tbody.removeChild(c);
        }
    }
    appendMessage('chat', $('<span/>').attr('class', 'msginfo').text('' + user + ' quit'), Date.now());
}

function msgRecv(msg) {
    console.log('msgRecv(' + JSON.stringify(msg) + ')');
    appendMessage(msg.from, msg.text, msg.time);
    notifs.notify(msg.from, msg.text);
}
function msgSent(msgid) {
    console.log('msgSent');
}

function wsClosed() {
    console.log('wsClosed');
    appendMessage('chat', $('<span/>').attr('class', 'msgerr').text('connection closed by server'), Date.now());
}

function initNotifs() {
    notifs = ChatNotifications();

    switch (notifs.status()) {
      case 'denied':  $('#sett_notif').hide(); break;
      case 'granted': $('#notif_cb')[0].checked = true; break;
    }
    $('#notif_cb').change(function () {
        notifs.enabled(this.checked);
    });

    $(window).focus( function ()   { notifs.gotFocus();  });
    $(window).blur(  function ()   { notifs.lostFocus(); });
}

function onLogin(msg) {
    $('#login').hide();
    $('#chat').show();
    $('#msg').focus();

    adjustHeight();
    userJoined(user);

    initNotifs();

    $(window).resize(function (ev) { adjustHeight();     });

    var msg = $('#msg');
    /*msg.change(function (ev) {
            var msgtext = msg.val();
            wsconn.send({ 'type': 'sent', 'text': msgtext });
            appendMessage(user, msgtext);    
            msg.val('');
    }); */
    msg.on('keyup', function (ev) {
        if (ev.which == 13) {
            var m = { 'type': 'sent', 'time': Date.now(), 'text': msg.val() };
            wsconn.send(m);
            appendMessage(user, m.text, m.time);
            msg.val('');
        }
    });
}

function onFailedLogin(err) {
    console.log('login failed');
    $('#loginfail').text('Login failed: ' + err);
}

function initWS(user) {
    var url = 'ws://' + window.location.host + '/ws';
    console.log('connecting to ' + url + '...');
    return WSProtocol(user, url, {
        'login_ok': onLogin,
        'login_failed': onFailedLogin, 

        'msg_received': msgRecv,
        'msg_sent': msgSent,

        'user_joined': userJoined,
        'user_quit': userQuit,

        'unknown': function (data) { console.log('unknown message: ' + data); },
        'ws_error': function (err) { console.log('WS error: ' + err); },
        'ws_closed': wsClosed,
    });
}

function userFromQuery() {
    var qs = window.location.search.substring(1);
    if (qs == '') return null;

    qs = qs.split('&');
    for (var i = 0; i < qs.length; ++i) {
        var q = qs[i];
        var eqindex = q.indexOf('=');
        if (q.substr(0, eqindex) == 'user')
            return q.substr(eqindex + 1);
    }
    return null;
}
function reloadPage () { window.location = window.location.origin + '?user=' + user; }

$(document).ready(function () {
    var quser = userFromQuery();
    if (quser !== null) {
        user = quser;
        wsconn = initWS(user);
    }

    $('#loginform').on('submit', function (e) {
        e.preventDefault();

        user = $('#inplogin').val();
        wsconn = initWS(user);
    });
});
</script>
<style type='text/css'>
.darkbg { background-color: #e8e9e8 ; }
.loginwidth {
  width: 10%;
  min-width: 10em;
  margin: 0.2em;
}
#login {
  padding: 2em;
  margin: 0 auto;
  text-align: center;
  max-width: 800px;
  min-width: 400px;
  width: 40%;
  border-radius:0.5em;
}
#inplogin {
  font-size:200%;
  text-align:center;
}
#submlogin {
  font-size: 140%;
  background-color: #c0ffc0;
  border-radius: 1em;
}
#loginfail {
  margin: 0 auto;
  color: red;
  font-weight: bold;
  text-align: center;
}

#chat {
  margin: 0 auto;
  display: none;
  max-width: 1000px;
  min-width: 400px;
  font-family: 'Noto Sans', 'PT Sans', sans-serif;
  font-size: 11pt;
  border-radius: 10px;
}

/* .brd { border: 1px dashed blue; } */
.content { background-color: white; }

#hist {
    width: 70%;
    float: left;
    display: block-inline;
    margin: 0.5em;
}

#hist {
    overflow-y: scroll;
    overflow-x: hidden;
}
#ulhist tr {
    max-height: 1em;
}

.histtime {
    color: #8a9;
}
.histuser {
    color: blue;
    width: 5em;
    text-align: right;
    background-color: #f8f8ff;
    padding: 0.2em 0.5em 0.1em 0.2em;
    margin-right: 0.5em;
}
.histmsg {
    text-decoration: italic;
    padding: 0 0 0 1em;
}

#roster {
    width: 25%;
    height: 80%;
    margin: 0.5em 0 0 0;
    float: left;
    display: block-inline;
}
#rstr {
    width: 100%;
    margin: 0.5em;
}
.rstrth {
    /*border: 1px solid #ccc;*/
}
.rstrtd {
    padding-left: 1.5em;
}
#settings {
    margin: 2em 0.5em 0 0.5em;
}
#sett_cap {
    font-weight: bold;
    text-align: center;
}

#message {
    clear: both;
}
#msg {
    margin: 0.5em;
    width: 70%;
    height: 2em;
    font-size: 12pt;
    font-family: 'Noto Sans', sans;
}

.msginfo {
    font-style: italic;
    color: #999;
}
.msgerr {
    font-weight: bold;
    color: red;
}

</style>
</head>
<body>

<div id='login' class='darkbg'>
  <form id='loginform'>
    <h2>Please enter your login</h2>
    <input id='inplogin' class='loginwidth' type='text' name='inplogin' autofocus /><br/>
    <input id='submlogin' class='loginwidth' type='submit'name='submlogin' value='log in'/></br/>
    <div id='loginfail' class='loginwidth'></div>
  </form>
</div>

<div id='chat' class='brd darkbg'>
  <div id='hist' class='content brd'>
    <table id='ulhist'>
       <tbody></tbody>
    </table>
  </div>
  <div id='roster' class='brd'>
    <table id='rstr' class='content'>
      <tr><th>user list<hr/></th></tr>
    </table>
    <div id='settings' class='content'>
      <div id='sett_cap'>settings</div><hr/>
      <div id='sett_notif'><input id='notif_cb' type='checkbox' />desktop notifications</div>
    </div>
  </div>
  <div id='message' class='brd'>
    <input type='text' id='msg' />
  </div>
</div>
</body>
</html>
